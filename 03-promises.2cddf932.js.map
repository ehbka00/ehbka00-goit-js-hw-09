{"mappings":"AAcA,SAASA,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,WAAWN,oBAA2BC,OAE9CM,EAAO,WAAWP,oBAA2BC,MAAU,GAExDA,EAAM,G,CAvBbQ,SAASC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GACnEA,EAAEC,iBAEF,MAAMZ,EAAQa,SAASC,KAAKC,SAASf,MAAMgB,OACrCC,EAAOJ,SAASC,KAAKC,SAASE,KAAKD,OACnCE,EAASL,SAASC,KAAKC,SAASG,OAAOF,OAE7C,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAC1BrB,EAAcqB,EAAI,EAAGnB,EAAQmB,EAAIF,GAC9BG,MAAKC,GAAUC,QAAQC,IAAIF,KAC3BG,OAAMC,GAASH,QAAQG,MAAMA,I","sources":["src/js/03-promises.js"],"sourcesContent":["document.querySelector('.form').addEventListener('submit', function (e) {\n  e.preventDefault();\n\n  const delay = parseInt(this.elements.delay.value);\n  const step = parseInt(this.elements.step.value);\n  const amount = parseInt(this.elements.amount.value);\n\n  for (let i = 0; i < amount; i++) {\n    createPromise(i + 1, delay + i * step)\n      .then(result => console.log(result))\n      .catch(error => console.error(error));\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`Promise ${position} resolved after ${delay}ms`);\n      } else {\n        reject(`Promise ${position} rejected after ${delay}ms`);\n      }\n    }, delay);\n  });\n}"],"names":["$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","parseInt","this","elements","value","step","amount","i","then","result","console","log","catch","error"],"version":3,"file":"03-promises.2cddf932.js.map"}